name: Context Pack Generation

on:
  pull_request:
    paths:
      - "src/**"
      - "docs/**"
      - "builder/**"
      - ".github/workflows/context.yml"
  push:
    branches: [main, feat/doc-factory]
    paths:
      - "src/**"
      - "docs/**"
      - "builder/**"
      - ".github/workflows/context.yml"

jobs:
  context-pack:
    runs-on: ubuntu-latest
    name: Generate Context Packs
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install click Jinja2 PyYAML requests
        
    - name: Set up pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        
    - name: Install Node dependencies
      run: pnpm install --no-frozen-lockfile
      
    - name: Install Python test dependencies
      run: |
        pip install pytest
      
    - name: Run golden checks
      run: |
        python -m pytest builder/tests/test_golden_checks.py -v
      
    - name: Create cache directory
      run: mkdir -p builder/cache
      
    - name: Generate context packs for representative paths
      run: |
        echo "Building context packs for representative paths..."
        
        # Function to build context with error handling
        build_context() {
          local target="$1"
          local purpose="$2"
          local feature="$3"
          local stacks="$4"
          local token_limit="$5"
          
          echo "Building context for $target..."
          if python3 builder/cli.py ctx:build "$target" --purpose "$purpose" --feature "$feature" --stacks "$stacks" --token-limit "$token_limit"; then
            echo "✅ Successfully built context for $target"
            return 0
          else
            echo "⚠️  Warning: Failed to build context for $target"
            return 1
          fi
        }
        
        # Build context for existing representative TypeScript files
        echo "Building context for representative TypeScript files..."
        build_context "builder/test_data/hello_good.ts" "implement" "typescript" "typescript" "8000" || true
        
        # Build context for any changed files in this PR
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "Building context for changed files..."
          
          # Get changed files by type
          CHANGED_TS_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E '\.(ts|tsx)$' | head -3)
          CHANGED_JS_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E '\.(js|jsx)$' | head -2)
          CHANGED_PY_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E '\.py$' | head -2)
          
          # Build context for TypeScript files
          for file in $CHANGED_TS_FILES; do
            if [ -f "$file" ]; then
              build_context "$file" "implement" "typescript" "typescript" "6000" || true
            fi
          done
          
          # Build context for JavaScript files
          for file in $CHANGED_JS_FILES; do
            if [ -f "$file" ]; then
              build_context "$file" "implement" "javascript" "javascript" "5000" || true
            fi
          done
          
          # Build context for Python files
          for file in $CHANGED_PY_FILES; do
            if [ -f "$file" ]; then
              build_context "$file" "implement" "python" "python" "5000" || true
            fi
          done
        fi
        
        # Build context for docs changes
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "Building context for changed documentation..."
          CHANGED_DOCS=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep '^docs/' | head -3)
          for doc in $CHANGED_DOCS; do
            if [ -f "$doc" ]; then
              # Determine doc type and purpose
              if echo "$doc" | grep -q "prd/"; then
                build_context "$doc" "review" "prd" "documentation" "4000" || true
              elif echo "$doc" | grep -q "arch/"; then
                build_context "$doc" "review" "architecture" "documentation" "4000" || true
              else
                build_context "$doc" "review" "documentation" "documentation" "3000" || true
              fi
            fi
          done
        fi
        
        # Build context for builder directory changes
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          CHANGED_BUILDER=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep '^builder/' | head -1)
          if [ -n "$CHANGED_BUILDER" ]; then
            echo "Building context for builder directory changes..."
            build_context "builder" "implement" "python" "python" "8000" || true
          fi
        fi
        
        # If no specific files or no context generated, build context for builder directory
        if [ ! -f "builder/cache/pack_context.json" ]; then
          echo "Building fallback context for builder directory..."
          build_context "builder" "implement" "python" "python" "8000" || true
        fi
        
        # Final check - ensure we have at least one context pack
        if [ ! -f "builder/cache/pack_context.json" ]; then
          echo "❌ ERROR: No context pack generated after all attempts"
          exit 1
        fi
        
    - name: Validate context pack structure
      run: |
        echo "Validating context pack structure..."
        
        if [ ! -f "builder/cache/pack_context.json" ]; then
          echo "❌ ERROR: pack_context.json not found"
          exit 1
        fi
        
        if [ ! -f "builder/cache/context.md" ]; then
          echo "❌ ERROR: context.md not found"
          exit 1
        fi
        
        # Validate JSON structure and Rules+Acceptance presence
        echo "Validating JSON structure and Rules+Acceptance presence..."
        python3 -c "
        import json
        with open('builder/cache/pack_context.json', 'r') as f:
            data = json.load(f)
        
        # Check for rules_markdown (always required)
        if 'rules_markdown' not in data.get('rules', {}):
            print('❌ ERROR: Missing rules_markdown in rules')
            exit(1)
        
        # Check for acceptance criteria (always required)
        acceptance = data.get('acceptance', [])
        if not acceptance or len(acceptance) == 0:
            print('❌ ERROR: Missing acceptance criteria')
            exit(1)
        
        # Check for code_excerpts section (always required)
        if 'code_excerpts' not in data or not data['code_excerpts']:
            print('❌ ERROR: Missing code_excerpts section or empty code_excerpts')
            exit(1)
        
        # Validate Rules content quality
        rules_markdown = data.get('rules', {}).get('rules_markdown', '')
        if len(rules_markdown.strip()) < 50:
            print('⚠️  WARNING: Rules content seems too short')
        
        # Validate Acceptance content quality
        acceptance_text = ' '.join([str(item) for item in acceptance])
        if len(acceptance_text.strip()) < 20:
            print('⚠️  WARNING: Acceptance criteria content seems too short')
        
        print('✅ Rules and Acceptance criteria validation passed')
        print(f'✅ Found {len(acceptance)} acceptance criteria items')
        print(f'✅ Rules content length: {len(rules_markdown)} characters')
        "
        
        # Validate context.md has content
        echo "Checking context.md content..."
        if [ ! -s "builder/cache/context.md" ]; then
          echo "❌ ERROR: context.md is empty"
          exit 1
        fi
        
        # Check that context.md contains Rules and Acceptance sections
        echo "Checking context.md for Rules and Acceptance sections..."
        if ! grep -q "## Rules" builder/cache/context.md; then
          echo "❌ ERROR: context.md missing Rules section"
          exit 1
        fi
        
        if ! grep -q "## Acceptance Criteria" builder/cache/context.md; then
          echo "❌ ERROR: context.md missing Acceptance Criteria section"
          exit 1
        fi
        
        echo "✅ Context markdown file has required sections"
        
        echo "✅ Context pack validation passed - Rules and Acceptance present"
        
    - name: Generate context pack summary
      run: |
        echo "## Context Pack Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "builder/cache/pack_context.json" ]; then
          echo "### Generated Files" >> $GITHUB_STEP_SUMMARY
          echo "- \`pack_context.json\` - Structured context data" >> $GITHUB_STEP_SUMMARY
          echo "- \`context.md\` - Human-readable context" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Show file sizes
          echo "### File Sizes" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          ls -lh builder/cache/pack_context.json builder/cache/context.md >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Show context stats
          echo "### Context Statistics" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          python3 -c "
          import json
          with open('builder/cache/pack_context.json', 'r') as f:
              data = json.load(f)
          
          print(f'Task: {data.get(\"task\", {}).get(\"purpose\", \"unknown\")} - {data.get(\"task\", {}).get(\"target_path\", \"unknown\")}')
          print(f'Feature: {data.get(\"task\", {}).get(\"feature\", \"none\")}')
          print(f'Token Limit: {data.get(\"constraints\", {}).get(\"token_limit\", \"unknown\")}')
          print(f'Budget Summary: {data.get(\"constraints\", {}).get(\"budget_summary\", {}).get(\"total_tokens\", \"unknown\")} tokens')
          print(f'Acceptance Criteria: {len(data.get(\"acceptance\", []))} items')
          print(f'Architecture: {len(data.get(\"architecture\", []))} items')
          print(f'Code: {len(data.get(\"code\", []))} items')
          
          # Rules and Acceptance validation
          rules = data.get('rules', {})
          rules_markdown = rules.get('rules_markdown', '')
          acceptance = data.get('acceptance', [])
          
          print(f'Rules Content: {len(rules_markdown)} characters')
          print(f'Acceptance Items: {len(acceptance)} items')
          
          # Check if Rules and Acceptance are present and substantial
          if len(rules_markdown.strip()) >= 50:
              print('✅ Rules: Present and substantial')
          else:
              print('⚠️  Rules: Present but may be too short')
              
          if len(acceptance) > 0:
              print('✅ Acceptance: Present')
          else:
              print('❌ Acceptance: Missing')
          " >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          # Add Rules and Acceptance validation status
          echo "### Validation Status" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Rules**: Present in context pack" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Acceptance Criteria**: Present in context pack" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Code Excerpts**: Present in context pack" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ No context pack generated" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Upload context pack artifacts
      uses: actions/upload-artifact@v4
      with:
        name: context-pack
        path: |
          builder/cache/pack_context.json
          builder/cache/context.md
        retention-days: 30
        
    - name: Upload context selection data
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: context-selection
        path: |
          builder/cache/context_selection.json
          builder/cache/context_graph.json
        retention-days: 30