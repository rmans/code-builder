# Example Discovery Context File
# This file demonstrates the structure and content of a discovery context YAML file
# Generated by the discover:regenerate command

# Metadata about the discovery context
metadata:
  generated_at: "2025-09-06T01:00:00Z"
  generator_version: "1.0.0"
  source_document: "PRD-2025-09-06-example-product"
  document_type: "prd"
  analysis_depth: "comprehensive"

# Document information
document:
  id: "PRD-2025-09-06-example-product"
  title: "Example Product Requirements"
  type: "prd"
  status: "draft"
  created: "2025-09-06"
  owner: "product_team"
  file_path: "docs/prd/PRD-2025-09-06-example-product.md"

# Extracted content sections
content:
  problem_statement: |
    Users need a simple way to manage their daily tasks without complex project management overhead.
    Current solutions are either too simple (basic todo lists) or too complex (full project management suites).
    
  goals:
    - Create an intuitive task management interface
    - Enable real-time collaboration between team members
    - Provide mobile-friendly access
    - Ensure data security and privacy
    
  requirements:
    functional:
      - User authentication and authorization
      - Create, read, update, delete tasks
      - Task categorization and filtering
      - Real-time updates via WebSocket
      - Mobile-responsive design
    non_functional:
      - Page load time < 2 seconds
      - Support 100+ concurrent users
      - 99.9% uptime
      - Data encryption in transit and at rest

# Acceptance criteria extracted from the document
acceptance_criteria:
  - "Users can register and login securely"
  - "Users can create tasks with title, description, and due date"
  - "Users can mark tasks as complete/incomplete"
  - "Users can filter tasks by status and category"
  - "Real-time updates work across multiple browser tabs"
  - "Application works on mobile devices"
  - "All user data is encrypted"

# Success metrics and KPIs
success_metrics:
  user_registration_rate: "50+ users in first month"
  task_completion_rate: "80% of created tasks completed"
  user_satisfaction: "4.5+ stars average rating"
  performance: "95% of page loads under 2 seconds"

# Technical stack information
technical_stack:
  frontend: "React with TypeScript"
  backend: "Node.js with Express"
  database: "PostgreSQL"
  real_time: "Socket.io"
  authentication: "JWT tokens"
  deployment: "Docker containers"

# Architecture insights
architecture_insights:
  patterns_identified:
    - "Component-based architecture (React)"
    - "RESTful API design"
    - "JWT-based authentication"
    - "WebSocket for real-time updates"
  
  design_principles:
    - "Mobile-first responsive design"
    - "Progressive Web App capabilities"
    - "Microservices architecture for scalability"
    - "Event-driven communication"

# Code quality analysis
code_quality:
  complexity_score: 7.2
  maintainability_index: 85
  test_coverage: 78
  technical_debt_ratio: 0.15
  
  issues_identified:
    - "Missing error boundaries in React components"
    - "Inconsistent error handling patterns"
    - "Limited unit test coverage for utility functions"
    - "No integration tests for API endpoints"

# Security analysis
security_analysis:
  authentication_method: "JWT tokens"
  data_encryption: "AES-256 for data at rest, TLS 1.3 for transit"
  vulnerability_scan: "No critical vulnerabilities found"
  security_recommendations:
    - "Implement rate limiting for API endpoints"
    - "Add input validation and sanitization"
    - "Enable CORS with specific origins"
    - "Implement audit logging for sensitive operations"

# Performance analysis
performance_analysis:
  bundle_size: "2.1MB (gzipped: 650KB)"
  first_contentful_paint: "1.2s"
  largest_contentful_paint: "2.1s"
  cumulative_layout_shift: "0.05"
  
  optimization_opportunities:
    - "Implement code splitting for route-based chunks"
    - "Add image optimization and lazy loading"
    - "Enable service worker for caching"
    - "Optimize database queries with proper indexing"

# Dependencies analysis
dependencies:
  production:
    react: "^18.2.0"
    typescript: "^5.0.0"
    express: "^4.18.0"
    postgresql: "^8.8.0"
    socket.io: "^4.7.0"
  
  development:
    jest: "^29.0.0"
    eslint: "^8.45.0"
    prettier: "^3.0.0"
    webpack: "^5.88.0"
  
  security_audit:
    vulnerabilities: 0
    outdated_packages: 3
    recommendations:
      - "Update socket.io to latest version"
      - "Upgrade jest to latest LTS version"
      - "Consider replacing deprecated packages"

# Testing strategy
testing_strategy:
  unit_tests:
    coverage: "78%"
    framework: "Jest with React Testing Library"
    focus_areas: ["Components", "Hooks", "Utilities"]
  
  integration_tests:
    coverage: "45%"
    framework: "Cypress"
    focus_areas: ["API endpoints", "User workflows"]
  
  e2e_tests:
    coverage: "30%"
    framework: "Playwright"
    focus_areas: ["Critical user paths", "Cross-browser compatibility"]

# Deployment and infrastructure
deployment:
  environment: "Docker containers"
  orchestration: "Kubernetes"
  ci_cd: "GitHub Actions"
  monitoring: "Prometheus + Grafana"
  logging: "ELK Stack (Elasticsearch, Logstash, Kibana)"
  
  infrastructure_requirements:
    - "Minimum 2 CPU cores, 4GB RAM per container"
    - "PostgreSQL database with read replicas"
    - "Redis for session storage and caching"
    - "CDN for static asset delivery"

# Risk assessment
risk_assessment:
  high_risks:
    - "Database performance under high load"
    - "WebSocket connection scaling"
    - "Data migration complexity"
  
  medium_risks:
    - "Third-party service dependencies"
    - "Browser compatibility issues"
    - "Mobile performance optimization"
  
  mitigation_strategies:
    - "Implement database connection pooling"
    - "Use Redis for WebSocket session management"
    - "Create comprehensive migration scripts"
    - "Establish fallback mechanisms for external services"

# Recommendations
recommendations:
  immediate:
    - "Implement comprehensive error handling"
    - "Add input validation and sanitization"
    - "Increase test coverage to 85%"
    - "Set up monitoring and alerting"
  
  short_term:
    - "Implement code splitting and lazy loading"
    - "Add performance monitoring"
    - "Create comprehensive documentation"
    - "Establish coding standards and guidelines"
  
  long_term:
    - "Consider microservices architecture"
    - "Implement advanced caching strategies"
    - "Add machine learning for task prioritization"
    - "Explore serverless deployment options"

# Related documents
related_documents:
  prd: "PRD-2025-09-06-example-product"
  architecture: "ARCH-2025-09-06-system-architecture"
  implementation: "IMPL-2025-09-06-development-plan"
  execution: "EXEC-2025-09-06-deployment-strategy"
  ux: "UX-2025-09-06-user-interface-design"

# Discovery context metadata
discovery_metadata:
  analysis_timestamp: "2025-09-06T01:00:00Z"
  analysis_duration: "45 seconds"
  files_analyzed: 23
  lines_of_code: 15420
  complexity_analysis: "completed"
  security_scan: "completed"
  performance_analysis: "completed"
  dependency_audit: "completed"
