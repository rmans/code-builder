# GitHub Actions Workflow Template
# This template demonstrates best practices for GitHub Actions workflows

name: Example Workflow

on:
  pull_request:
    branches: [ main ]

jobs:
  example-job:
    runs-on: ubuntu-latest
    
    # REQUIRED: Explicit permissions for workflows using github-script
    permissions:
      contents: read          # For checking out code
      pull-requests: write    # For creating/updating PR comments
      issues: write          # For creating/updating issue comments
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Do some work
        run: |
          echo "Doing work here..."
          # Create some output file
          echo "## Work Results" > results.md
          echo "Work completed successfully" >> results.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              // Read the results file
              const results = fs.readFileSync('results.md', 'utf8');
              
              // Create comment with proper error handling
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## üîç Work Results\n\n${results}`
              });
              
              console.log('‚úÖ Successfully created PR comment');
              
            } catch (error) {
              // CRITICAL: Always wrap API calls in try-catch
              console.log('‚ö†Ô∏è Could not create PR comment:', error.message);
              console.log('üìù Comment content would have been:');
              try {
                const results = fs.readFileSync('results.md', 'utf8');
                console.log(results);
              } catch (readError) {
                console.log('Could not read results file');
              }
              // Don't fail the workflow - comment creation is not critical
            }
        
        # REQUIRED: Don't fail workflow if comment creation fails
        continue-on-error: true

      - name: Update existing comment (alternative pattern)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const results = fs.readFileSync('results.md', 'utf8');
              const commentBody = `## üîç Updated Work Results\n\n${results}`;
              
              // Find existing comment by bot
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              
              const botComment = comments.find(comment => 
                comment.user.type === 'Bot' && 
                comment.body.includes('Work Results')
              );
              
              if (botComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: commentBody
                });
                console.log('‚úÖ Updated existing comment');
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: commentBody
                });
                console.log('‚úÖ Created new comment');
              }
              
            } catch (error) {
              console.log('‚ö†Ô∏è Could not create/update comment:', error.message);
              console.log('üìù Comment content would have been:');
              try {
                const results = fs.readFileSync('results.md', 'utf8');
                console.log(results);
              } catch (readError) {
                console.log('Could not read results file');
              }
            }
        
        continue-on-error: true
