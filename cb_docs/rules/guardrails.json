{
  "forbiddenPatterns": [
    { "pattern": "localStorage\\.(setItem|getItem)\\(", "message": "Do not store tokens in localStorage/sessionStorage" },
    { "pattern": "throw\\s*['\"`]", "message": "Do not throw string literals; use Error or subclass" },
    { "pattern": "\\.test\\.(ts|js|tsx|jsx)$", "message": "Test files must be in tests/ directory, not in src/ or root" },
    { "pattern": "\\.spec\\.(ts|js|tsx|jsx)$", "message": "Spec files must be in tests/ directory, not in src/ or root" },
    { "pattern": "test.*\\.(json|md|txt)$", "message": "Test artifacts must be in tests/data/ or tests/results/, not in root or src/" },
    { "pattern": "\"rules_markdown\":\\s*\"\"", "message": "Context packs must have non-empty rules_markdown - check RULES_DIR path and rules loading" },
    { "pattern": "\"acceptance_criteria\":\\s*\\[\\s*\\]", "message": "Context packs must have non-empty acceptance_criteria - implement fallback generation" },
    { "pattern": "\"code_excerpts\":\\s*\\[\\s*\\]", "message": "Context packs must have non-empty code_excerpts - check target file exists and is readable" },
    { "pattern": "uses:\\s*actions/github-script", "message": "GitHub Actions using github-script must have explicit permissions - add permissions block with pull-requests: write and issues: write" },
    { "pattern": "github\\.rest\\.issues\\.(createComment|updateComment)", "message": "GitHub API calls for comments must be wrapped in try-catch blocks to handle permission errors gracefully" },
    { "pattern": "data\\.get\\('acceptance'", "message": "Use 'acceptance_criteria' not 'acceptance' when accessing context pack data - field name mismatch causes validation failures" },
    { "pattern": "data\\.get\\(\"acceptance\"", "message": "Use 'acceptance_criteria' not 'acceptance' when accessing context pack data - field name mismatch causes validation failures" },
    { "pattern": "python3 -c \"\\n\\s+import", "message": "Python code in GitHub Actions must not be indented - remove leading whitespace to prevent IndentationError" },
    { "pattern": "python3 -c \"\\n\\s+with open", "message": "Python code in GitHub Actions must not be indented - remove leading whitespace to prevent IndentationError" },
    { "pattern": "python3 -c \"\\n\\s+print", "message": "Python code in GitHub Actions must not be indented - remove leading whitespace to prevent IndentationError" },
    { "pattern": "\"docs/\"", "message": "Hardcoded path 'docs/' detected - use get_docs_dir() from builder.config.settings instead" },
    { "pattern": "\"cb_docs/\"", "message": "Hardcoded path 'cb_docs/' detected - use get_docs_dir() from builder.config.settings instead" },
    { "pattern": "\"builder/cache\"", "message": "Hardcoded path 'builder/cache' detected - use get_cache_dir() from builder.config.settings instead" },
    { "pattern": "\"docs/templates\"", "message": "Hardcoded path 'docs/templates' detected - use get_templates_dir() from builder.config.settings instead" },
    { "pattern": "\"docs/rules\"", "message": "Hardcoded path 'docs/rules' detected - use get_rules_dir() from builder.config.settings instead" },
    { "pattern": "f\"docs/", "message": "Hardcoded path 'docs/' in f-string detected - use get_docs_dir() from builder.config.settings instead" },
    { "pattern": "f\"cb_docs/", "message": "Hardcoded path 'cb_docs/' in f-string detected - use get_docs_dir() from builder.config.settings instead" },
    { "pattern": "os\\.path\\.join\\([^,]+,\\s*[\"']docs/", "message": "Hardcoded 'docs/' in os.path.join detected - use get_docs_dir() from builder.config.settings instead" },
    { "pattern": "os\\.path\\.join\\([^,]+,\\s*[\"']cb_docs/", "message": "Hardcoded 'cb_docs/' in os.path.join detected - use get_docs_dir() from builder.config.settings instead" },
    { "pattern": "0\\.7", "message": "Hardcoded value '0.7' detected - use get_ai_default_temp() or get_eval_objective_weight() from builder.config.settings instead" },
    { "pattern": "0\\.3", "message": "Hardcoded value '0.3' detected - use get_eval_subjective_weight() from builder.config.settings instead" },
    { "pattern": "0\\.6", "message": "Hardcoded value '0.6' detected - use get_ai_base_temp() from builder.config.settings instead" },
    { "pattern": "0\\.9", "message": "Hardcoded value '0.9' detected - use get_ai_default_top_p() or get_ai_base_top_p() from builder.config.settings instead" },
    { "pattern": "0\\.1", "message": "Hardcoded value '0.1' detected - use get_ai_temp_offset(), get_ai_top_p_offset(), get_ai_min_temp(), get_ai_min_top_p(), or get_relevance_threshold_low() from builder.config.settings instead" },
    { "pattern": "0\\.2", "message": "Hardcoded value '0.2' detected - use get_relevance_threshold_medium() from builder.config.settings instead" },
    { "pattern": "0\\.4", "message": "Hardcoded value '0.4' detected - use get_score_title_weight() from builder.config.settings instead" },
    { "pattern": "0\\.5", "message": "Hardcoded value '0.5' detected - use get_eval_confidence_threshold() from builder.config.settings instead" },
    { "pattern": "50\\.0", "message": "Hardcoded value '50.0' detected - use get_eval_default_score() from builder.config.settings instead" },
    { "pattern": "1\\.3", "message": "Hardcoded value '1.3' detected - use get_budget_token_factor() from builder.config.settings instead" },
    { "pattern": "1\\.0", "message": "Hardcoded value '1.0' detected - use get_network_poll_interval() or get_ai_max_temp() from builder.config.settings instead" },
    { "pattern": "60\\.0", "message": "Hardcoded value '60.0' detected - use get_network_timeout() from builder.config.settings instead" },
    { "pattern": "\"127\\.0\\.0\\.1\"", "message": "Hardcoded IP '127.0.0.1' detected - use get_network_server_host() from builder.config.settings instead" },
    { "pattern": "\"1\\.0\"", "message": "Hardcoded version '1.0' detected - use get_schema_version() from builder.config.settings instead" },
    { "pattern": "\"1\\.0\\.0\"", "message": "Hardcoded version '1.0.0' detected - use get_app_version() from builder.config.settings instead" }
  ],
  "hints": [
    { "pattern": "axios\\.create\\(", "message": "Use shared http client instead of axios.create()" },
    { "pattern": "fetch\\(", "message": "Prefer shared http client (src/utils/http.ts)" },
    { "pattern": "\\nimport\\s+(requests|flask|click|yaml|jinja2|pydantic|python_dotenv)\\s*\\n", "message": "Python import detected - verify dependency is in requirements.txt and installed in .venv" },
    { "pattern": "\\nimport\\s+\\w+", "message": "Python import: 1) Add to requirements.txt 2) Run 'source .venv/bin/activate && pip install -r requirements.txt' 3) Verify with 'python -c \"import <module>\"'" },
    { "pattern": "test.*\\.(ts|js|tsx|jsx)", "message": "Test files should be created in tests/data/ directory" },
    { "pattern": ".*response.*\\.json", "message": "Test response files should go in tests/data/ directory" },
    { "pattern": ".*report.*\\.(md|json|txt)", "message": "Test reports should go in tests/results/ directory" }
  ]
}
