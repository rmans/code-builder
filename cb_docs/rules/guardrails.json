{
  "forbiddenPatterns": [
    { "pattern": "localStorage\\.(setItem|getItem)\\(", "message": "Do not store tokens in localStorage/sessionStorage" },
    { "pattern": "throw\\s*['\"`]", "message": "Do not throw string literals; use Error or subclass" },
    { "pattern": "\\.test\\.(ts|js|tsx|jsx)$", "message": "Test files must be in tests/ directory, not in src/ or root" },
    { "pattern": "\\.spec\\.(ts|js|tsx|jsx)$", "message": "Spec files must be in tests/ directory, not in src/ or root" },
    { "pattern": "test.*\\.(json|md|txt)$", "message": "Test artifacts must be in tests/data/ or tests/results/, not in root or src/" },
    { "pattern": "\"rules_markdown\":\\s*\"\"", "message": "Context packs must have non-empty rules_markdown - check RULES_DIR path and rules loading" },
    { "pattern": "\"acceptance_criteria\":\\s*\\[\\s*\\]", "message": "Context packs must have non-empty acceptance_criteria - implement fallback generation" },
    { "pattern": "\"code_excerpts\":\\s*\\[\\s*\\]", "message": "Context packs must have non-empty code_excerpts - check target file exists and is readable" },
    { "pattern": "uses:\\s*actions/github-script", "message": "GitHub Actions using github-script must have explicit permissions - add permissions block with pull-requests: write and issues: write" },
    { "pattern": "github\\.rest\\.issues\\.(createComment|updateComment)", "message": "GitHub API calls for comments must be wrapped in try-catch blocks to handle permission errors gracefully" },
    { "pattern": "data\\.get\\('acceptance'", "message": "Use 'acceptance_criteria' not 'acceptance' when accessing context pack data - field name mismatch causes validation failures" },
    { "pattern": "data\\.get\\(\"acceptance\"", "message": "Use 'acceptance_criteria' not 'acceptance' when accessing context pack data - field name mismatch causes validation failures" },
    { "pattern": "python3 -c \"\\n\\s+import", "message": "Python code in GitHub Actions must not be indented - remove leading whitespace to prevent IndentationError" },
    { "pattern": "python3 -c \"\\n\\s+with open", "message": "Python code in GitHub Actions must not be indented - remove leading whitespace to prevent IndentationError" },
    { "pattern": "python3 -c \"\\n\\s+print", "message": "Python code in GitHub Actions must not be indented - remove leading whitespace to prevent IndentationError" },
    { "pattern": "\\.cb/", "message": "Do not create files in .cb/ directory - this is only created by the installer. Use configuration paths instead (get_effective_docs_dir(), get_effective_cache_dir(), etc.)" },
    { "pattern": "\"\\\\.cb/", "message": "Do not reference .cb/ directory in code - use configuration paths instead" },
    { "pattern": "'\\\\.cb/", "message": "Do not reference .cb/ directory in code - use configuration paths instead" },
    { "pattern": "`\\\\.cb/", "message": "Do not reference .cb/ directory in code - use configuration paths instead" },
    { "pattern": "cp -r \\.cursor", "message": "Do not copy .cursor/rules/ during installation - this creates conflicts with project rules. Use rule merger instead." },
    { "pattern": "cp -r.*\\.cursor", "message": "Do not copy .cursor directory during installation - this copies rules and creates conflicts. Use rule merger instead." },
    { "pattern": "cp.*rules.*\\.cb", "message": "Do not copy rules to .cb/ directory - this creates conflicts with project rules. Use rule merger instead." }
  ],
  "hints": [
    { "pattern": "axios\\.create\\(", "message": "Use shared http client instead of axios.create()" },
    { "pattern": "fetch\\(", "message": "Prefer shared http client (src/utils/http.ts)" },
    { "pattern": "\\nimport\\s+(requests|flask|click|yaml|jinja2|pydantic|python_dotenv)\\s*\\n", "message": "Python import detected - verify dependency is in requirements.txt and installed in .venv" },
    { "pattern": "\\nimport\\s+\\w+", "message": "Python import: 1) Add to requirements.txt 2) Run 'source .venv/bin/activate && pip install -r requirements.txt' 3) Verify with 'python -c \"import <module>\"'" },
    { "pattern": "test.*\\.(ts|js|tsx|jsx)", "message": "Test files should be created in tests/data/ directory" },
    { "pattern": ".*response.*\\.json", "message": "Test response files should go in tests/data/ directory" },
    { "pattern": ".*report.*\\.(md|json|txt)", "message": "Test reports should go in tests/results/ directory" }
  ]
}
